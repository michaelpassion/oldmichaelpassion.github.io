<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: leetcode | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-11-21T21:22:59+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3Sum]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/11/21/3sum/"/>
    <updated>2014-11-21T21:05:30+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/11/21/3sum</id>
    <content type="html"><![CDATA[<blockquote><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>

<p>Note:<br/>
* Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)<br/>
* The solution set must not contain duplicate triplets.</p></blockquote>

<pre><code>For example, given array S = {-1 0 1 2 -1 -4}, A solution set is:  
(-1, 0, 1)  
(-1, -1, 2) 
</code></pre>

<!--more-->


<p> <br/>
<strong>解题思路</strong><br/>
1. 首先想到和2sum类似，可以将3sum转换为2sum, 遍历数组，用0减去当前数字，将3sum转换为2sum。<br/>
2. leetcode  <a href="https://oj.leetcode.com/problems/two-sum/">Two Sum</a> 只有一组解，而3sum有多组解，且要考虑有重复解。<br/>
3. 去除重复解，先对数组排序，在遍历数组时跳过重复的数字，在for循环里找<code>2Sum</code>时，要找到相同数字的最后（或最前）一个，记得始终要<code>l &lt; r</code>, 见代码;<br/>
4. 找到符合条件的一组加入结果中即可。</p>

<pre><code>vector&lt;vector&lt;int&gt; &gt; threeSum(vector&lt;int&gt; &amp;num) {
    vector&lt;vector&lt;int&gt; &gt; res;
    if (num.size() &lt;= 2) return res;
    sort(num.begin(),num.end());

    int twoSum = 0;

    for (int i=0; i&lt; num.size()-2; i++)
    {
        int l = i+1, r = num.size()-1;
        twoSum = 0 - num[i];
        while(l &lt; r)
        {
            if (num[l] + num[r] == twoSum)
            {
                vector&lt;int&gt; three(3);
                three[0] = num[i];
                three[1] = num[l];
                three[2] = num[r];
                res.push_back(three);

                //一直找到与num[l]相同的最后一个数
                while (l &lt; r &amp;&amp; num[l] == num[l+1])
                    l++;
                //一直找到与num[l]相同的最前一个数
                while (num[r-1] == num[r] &amp;&amp; l &lt; r)
                    r--;
                l++; r--;

            } else if ( num[l]+num[r] &lt; twoSum )
            {
                //一直找到与num[l]相同的最后一个数
                while (l &lt; r &amp;&amp; num[l] == num[l+1])
                    l++;
                l++;

            }
            else if ( num[r]+num[r] &gt; twoSum )
            {
                //一直找到与num[l]相同的最前一个数
                while (num[r-1] == num[r] &amp;&amp; l &lt; r)
                    r--;
                r--;
            }
        }

        while(num[i+1] == num[i] &amp;&amp; i &lt;num.size() - 1)
            i++;
    }
    return res;

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZigZag Conversion]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/11/19/zigzag-conversion/"/>
    <updated>2014-11-19T19:51:18+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/11/19/zigzag-conversion</id>
    <content type="html"><![CDATA[<blockquote><p>The string <code>"PAYPALISHIRING"</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>

<p>P   A   H   N<br/>
A P L S I I G<br/>
Y   I   R<br/>
And then read line by line: &ldquo;PAHNAPLSIIGYIR&rdquo;
Write the code that will take a string and make this conversion given a number of rows:</p>

<p>string convert(string text, int nRows);
<code>convert("PAYPALISHIRING", 3)</code> should return<code>"PAHNAPLSIIGYIR"</code>.</p></blockquote>

<!--more-->


<p><strong>解题思路</strong>
找了好长时间规律，有点乱，没有分析出合适的公式，看到这个方法，很直观，很赞，用到一个<code>step</code>变量去控制向哪一个<code>string</code>添加。而且有相当好的时间复杂度。</p>

<pre><code>class Solution {
public:
    string convert(string s, int nRows) {
        if (nRows &lt; 2) return s;
        const int len = s.length();
        string res[nRows];
        int step = 1, row = 0;
        for (int i =0; i&lt; len; i++)
        {
           res[row] += s[i];
           if (row == 0)
           {
               step = 1;

           }else if (row == nRows-1)
               step = -1;
            row += step;
        }

        for(int i=1; i&lt; nRows; i++)
            res[0]+=res[i];
        return res[0];
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valid Sudoku]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/11/19/valid-sudoku/"/>
    <updated>2014-11-19T17:38:58+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/11/19/valid-sudoku</id>
    <content type="html"><![CDATA[<blockquote><p>Determine if a Sudoku is valid, according to: <a href="http://sudoku.com.au/TheRules.aspx">Sudoku Puzzles - The Rules</a>.</p>

<p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>'.'</code>.<br/>
<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="" /></p>

<p>A partially filled sudoku which is valid.<br/>
Note:A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.</p></blockquote>

<!--more-->


<p><strong>解题思路</strong><br/>
这道题要求检查数独是否有效，既检查数独里的每一行，每一列，每一个九宫格里有没有重复数字，若有，则数独是无效的。通过一个双层循环可以实现以上三种检查，难点在检查九宫格。<br/>
以下方法定义了三个数组，分别用来检查行，列，九宫格，相当于三个hash table。</p>

<pre><code>class Solution {
public:
    bool isValidSudoku(vector&lt;vector&lt;char&gt; &gt; &amp;board) {
        int checkRow[10] = {0};
        int checkCol[10] = {0};
        int checkSqu[10] = {0};
        for(int i=0; i&lt; 9; ++i)
        {
            memset(checkRow,0,sizeof(checkRow));
            memset(checkCol,0,sizeof(checkCol));
            memset(checkSqu,0,sizeof(checkSqu));
            for(int j=0; j&lt; 9; ++j)
            {
               if(!checkValid(checkRow,board[i][j]-'0') || 
                  !checkValid(checkCol,board[j][i]-'0') ||
                  !checkValid (checkSqu,board[3*(i/3)+j/3][3*(i%3)+j%3]-'0'))
                  return false;

            }
        }
        return true;
    }
    bool checkValid(int a[], int val)
    {
        if (val &lt; 0) return true;
        if (a[val] == 1) return false;
        a[val] = 1;
        return true;
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Binary]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/11/19/add-binary/"/>
    <updated>2014-11-19T13:11:32+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/11/19/add-binary</id>
    <content type="html"><![CDATA[<blockquote><p>Given two binary strings, return their sum (also a binary string).</p>

<p>For example,<br/>
a = <code>"11"</code><br/>
b = <code>"1"</code><br/>
Return <code>"100"</code>.</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/add-binary/">leetcode express</a></p>

<p><strong>解题思路</strong>
类似于多项式相加，用位运算加速计算，<code>carry</code>用来保存进位，<code>tmp</code>保存两个二进制数第<code>i</code>位的和，再和carry相加，并将结果加入<code>res</code>中，最后因为<code>res</code>是逆序的，再将<code>res</code>翻转一遍。<br/>
&#8220;`
class Solution {
public:
    string addBinary(string a, string b) {
        int result=0, carry =0;
        string res = &ldquo;&rdquo;;
        int aLen = a.length()-1;
        int bLen = b.length()-1;
        int tmp;</p>

<pre><code>    while(aLen &gt;=0 &amp;&amp; bLen &gt;=0)
    {
        result = (a[aLen]-'0')^(b[bLen] - '0');
        tmp = (result ^ carry);
        res +=to_string(tmp);
        carry = (a[aLen--]- '0')+(b[bLen--] - '0')+carry &gt;= 2 ? 1 : 0;
    }

    while (aLen&gt;=0) {
        tmp = ((a[aLen]-'0')^carry);
        res += to_string(tmp);
        carry = (a[aLen]-'0')&amp;carry;
        aLen--;
    }
    while (bLen&gt;=0) {
        tmp = ((b[bLen]-'0')^carry);
        res += to_string(tmp);
        carry = (b[bLen]-'0')&amp;carry;
        bLen--;
    }
    if (carry == 1) {
        res += to_string(carry);
    }

    int l =0, r= res.length()-1;
    while(l &lt; r)
    {
        swap(res[l],res[r]);
        l++;r--;
    }

    return res;
}
</code></pre>

<p>};
&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Count and Say]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/11/18/count-and-say/"/>
    <updated>2014-11-18T22:54:58+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/11/18/count-and-say</id>
    <content type="html"><![CDATA[<blockquote><p>The count-and-say sequence is the sequence of integers beginning as follows:
<code>1, 11, 21, 1211, 111221, ...</code></p>

<p><code>1</code> is read off as <code>"one 1"</code> or <code>11</code>.<br/>
<code>11</code> is read off as <code>"two 1s"</code> or<code>21</code>.<br/>
<code>21</code> is read off as <code>"one 2, then one 1"</code> or <code>1211</code>.<br/>
Given an integer <code>n</code>, generate the <code>nth</code> sequence.</p>

<p>Note: The sequence of integers will be represented as a string.</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/count-and-say/">leetcode express</a></p>

<p><strong>解题思路</strong>
最开始想到递归，因为后一个字符串是通过前一个字符串确定的，但是转念一想只需要一个字符串来保存状态即可，以下解法公参考：</p>

<pre><code>class Solution {
public:
    string countAndSay(int n) {
        if (n == 1)  return "1";
        string a = "1";
        string tmp = "";
        for (int i=0; i&lt; n-1; i++) {
            int count = 1;

            for (int j=0; j&lt;a.length(); j++) {
                if(a[j] == a[j+1])
                    count++;
                else
                {
                    tmp += to_string(count) + a[j];
                    count=1;

                }
            }
            a = tmp;
            tmp = "";
        }

        return a;
    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
