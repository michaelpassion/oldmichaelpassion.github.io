<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backtrack | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/backtrack/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-08-24T20:06:35+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Permutations II]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/16/permutations-ii/"/>
    <updated>2014-08-16T11:18:57+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/16/permutations-ii</id>
    <content type="html"><![CDATA[<blockquote><p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>

<p>For example,</p>

<p>[1,1,2] have the following unique permutations:</p>

<p>[1,1,2], [1,2,1], and [2,1,1].</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/permutations-ii/">leetcode传送门</a></p>

<p><em>思路</em></p>

<p>用回溯法，求全排列的顺序同permutation</p>

<p>permutation</p>

<ol>
<li>首先固定首位元素，从第二位开始依次与第一位交换</li>
<li>对去除首位的子序列，进行全排列。同样固定子序列的首位元素，从子序列的第二位起，依次与第一位交换。</li>
<li>交换到最后一位，将此时的序列打印，递归返回。</li>
</ol>


<p>permutation II 有重复数字，所以和相同的数字交换位置，就会得到重复的序列，通过一个无序集保存当前已经交换个位置的数，如果要交换位置的数已经在无序集中，就不交换进入下一个循环</p>

<pre><code class="c++ permutation II">class Solution {
public:
    vector&lt;vector&lt;int&gt; &gt; permuteUnique(vector&lt;int&gt; &amp;num) {
       vector&lt;vector&lt;int&gt; &gt; ret;
       if(num.size() &lt; 2)
       {
           ret.push_back(num);
           return ret;
       }

       perm(num,ret,0);
       return ret;
    }

    void perm(vector&lt;int&gt; &amp;num, vector&lt;vector&lt;int&gt; &gt; &amp;ret, int t)
    {
        if(t == num.size())
        {
            ret.push_back(num);
            return;
        }

        unordered_set&lt;int&gt; used;
        for(int i=t; i&lt; num.size(); ++i)
        {
            if(used.find(num[i]) == used.end())
            {
                swap(num[t],num[i]);
                perm(num,ret,t+1);
                swap(num[t],num[i]);
                used.insert(num[i]);
            }
        }
    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
