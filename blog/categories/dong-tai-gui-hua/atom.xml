<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 动态规划 | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/dong-tai-gui-hua/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-09-10T19:22:57+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unique Binary Search Trees]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/25/unique-binary-search-trees/"/>
    <updated>2014-08-25T20:17:26+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/25/unique-binary-search-trees</id>
    <content type="html"><![CDATA[<blockquote><p>Given n, how many structurally unique BST&rsquo;s (binary search trees) that store values 1&hellip;n?</p>

<p>For example,</p>

<p>Given n = 3, there are a total of 5 unique BST&rsquo;s.</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/unique-binary-search-trees/">leetcode express</a></p>

<p><em>思路</em><br/>
二叉搜索树分为左子树，根，右子树。而每一个左子树又可继续划分为以上结构。同理右子树也可以进行同样的划分。使用一个数组来记录n个节点的二叉搜索树有多少种。后面使用时直接查询即可。</p>

<p>依次把每个节点作为根节点，左边节点作为左子树，右边节点作为右子树，那么总的数目等于左子树数目*右子树数目。</p>

<pre><code class="c++ DP">class Solution {
public:
    int numTrees(int n) {
        int array[n+1];
        memset(array,0,sizeof(array));
        array[0] = 1;

        for(int i=1; i&lt;=n; i++)
            for(int j=0;j&lt;i;j++)
                array[i] += array[j]*array[i-1-j];

        return array[n];
    }
};
</code></pre>

<p>实际上只需计算前半部分作为根节点的树的数目，然后乘以2（奇数节点还要加上中间节点作为根的二叉搜索树的数目）</p>

<pre><code class="c++ 只计算前半段划分">class Solution {
public:
    int numTrees(int n) {
        int array[n+1];
        memset(array,0,sizeof(array));
        array[0] = 1;

        for(int i=1; i&lt;=n; i++)
        {
            int tmp = i&gt;&gt;1;
            for(int j=1;j&lt;=tmp;j++)
            {
                array[i] += array[j-1]*array[i-j];
            }
            array[i] &lt;&lt;= 1;
            if(i &amp; 0x1)
                array[i] += array[tmp] * array[tmp]; 
        }

        return array[n];
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unique paths]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/10/unique-paths/"/>
    <updated>2014-08-10T16:56:05+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/10/unique-paths</id>
    <content type="html"><![CDATA[<blockquote><p>A robot is located at the top-left corner of a m x n grid (marked &lsquo;Start&rsquo; in the diagram below).</p>

<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &lsquo;Finish&rsquo; in the diagram below).</p>

<p>How many possible unique paths are there?</p>

<p>Above is a 3 x 7 grid. How many possible unique paths are there?</p>

<p>Note: m and n will be at most 100.</p></blockquote>

<!--more-->


<p><em>Method 1</em>
利用分治思想，假设矩阵A[m][n],要求A[m][n]共有多少 unique paths,可以求<br/>
A[m][n] = A[m][n-1]+ A[m-1][n] （因为只能朝下方和右方走）
还可以用一维数组直接简化二维数组
<code>c++
class Solution {
public:
    int uniquePaths(int m, int n) {
        if (m &gt; n)
        swap(m,n);
        int map[n] = {1};
        for(int i=1; i&lt;m;++i)
        {
            for(int j=1; j&lt;m; ++j)
                map[j]+=map[j-1];
        }
    }
}
</code>
<em>Method 2</em>
DP
<code>c++
class Solution {
public:
    int uniquePaths(int m, int n) {
       if(m &lt; n)
            swap(m,n);
        int a[101][101]={0};
        for(int i=0; i&lt;m; i++)
            a[i][0] = 1;
        for(int i=1; i&lt;n; i++)
            a[0][i] = 1;
        for(int i = 1; i&lt;=m; i++)
            for(int j=1; j&lt;=n;++j)
                a[i][j]= a[i-1][j] + a[i][j-1];
        return a[m-1][n-1];
    }
};
</code></p>
]]></content>
  </entry>
  
</feed>
