<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: two_sum | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/two-sum/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-08-25T11:43:43+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[two sum]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/25/two-sum/"/>
    <updated>2014-08-25T11:08:14+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/25/two-sum</id>
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers, find two numbers such that they add up to a specific target number.</p>

<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>

<p>You may assume that each input would have exactly one solution.</p>

<p>  Input: numbers={2, 7, 11, 15}, target=9</p>

<p>  Output: index1=1, index2=2</p></blockquote>

<!--more-->


<p><em>思路</em></p>

<ol>
<li>用map存储整个vector，用vector中每个元素的值做pair的key，元素的index作为pair值，插入到map中</li>
<li>遍历数组时，从图中查找target-num[i]，利用图来降低时间复杂度 O(logN);</li>
</ol>


<pre><code class="c++ 时间复杂度 O(n), 空间复杂度O(n) ">class Solution {
public:
    vector&lt;int&gt; twoSum(vector&lt;int&gt; &amp;numbers, int target) {
        vector&lt;int&gt; ret;
        if(numbers.size() &lt; 2) return ret;
        int i = 0, j = 0;
        map&lt;int,int&gt; nums;
        for(int i=0; i&lt; numbers.size(); i++)
        {
            nums.insert(pair&lt;int,int&gt;(numbers[i],i+1));
        }
        for(; i &lt; numbers.size(); i++)
        {
            int tmp = target - numbers[i];
            map&lt;int,int&gt;::iterator it = nums.find(tmp);
            if(it != nums.end())
            {
                int index1 = i+1;
                int index2 = it-&gt;second;
                if(index1&lt; index2)
                {
                    ret.push_back(index1);
                    ret.push_back(index2);
                    return ret;
                } 
                else if (index1 &gt; index2)
                {
                    ret.push_back(index2);
                    ret.push_back(index1);
                    return ret;
                }
            }
        }

        return ret;

    }
};
</code></pre>

<p><em>另一种解法</em></p>

<pre><code class="c++">class Solution {
public:
    vector&lt;int&gt; twoSum(vector&lt;int&gt; &amp;numbers, int target) {
        int len = numbers.size();
        assert(len &gt;= 2);   
        vector&lt;int&gt; ret(2,0);
        map&lt;int, int&gt; mapping;
        vector&lt;long long&gt; mul(len,0);

        for(int i=0; i&lt;len; ++i)
        {
            mul[i] = (target - numbers[i]) * numbers[i];
            if(mapping[mul[i]] &gt;0)
            {
                // 排除 numbers[i] == target/2 的情况
                if(numbers[mapping[mul[i]] -1] + numbers[i] == target)
                {
                    ret[0] = mapping[mul[i]];
                    ret[1] = i+1;
                    return ret;
                }
            }
            else
            {
                mapping[mul[i]] = i+1;
            }
        }

    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
