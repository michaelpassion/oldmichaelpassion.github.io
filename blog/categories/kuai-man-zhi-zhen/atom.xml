<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 快慢指针 | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/kuai-man-zhi-zhen/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-08-24T19:05:41+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reorder List]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/17/reorder-list/"/>
    <updated>2014-08-17T16:32:11+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/17/reorder-list</id>
    <content type="html"><![CDATA[<blockquote><p>Given a singly linked list L: <code>L0→L1→…→Ln-1→Ln,</code></p>

<p>reorder it to: <code>L0→Ln→L1→Ln-1→L2→Ln-2→…</code></p>

<p>You must do this in-place without altering the nodes&#8217; values.</p>

<p>For example,
Given <code>{1,2,3,4}</code>, reorder it to <code>{1,4,2,3}</code>.</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/reorder-list/">leetcode express</a></p>

<p><em>思路</em></p>

<p> 这题的难度在于问题的规模上，需要把一个字符串划分成两个字符串（快慢指针），将第二个字符串（后半个）逆置（原地逆置，头插法），再将两个字符串合并。代码如下.
 
&#8220;`c++ Reorder List</p>

<p>/<em><em>
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode </em>next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 </em>/
class Solution {
public:
    ListNode<em> findHalfNode(ListNode </em>head)
    {
        ListNode <em>fast = head;
        ListNode </em>slow = head;</p>

<pre><code>    while(fast &amp;&amp; fast-&gt;next)
    {
        fast = fast-&gt;next-&gt;next;
        slow = slow-&gt;next;
    }
    return slow;
}

ListNode* reverseList(ListNode *head)
{
    ListNode *dummy = new ListNode(-1);
    dummy-&gt;next = head;

    ListNode *cur = head-&gt;next;
    head-&gt;next = NULL;
    while(cur)
    {
        ListNode *tmp = cur;
        cur =cur-&gt;next;
        tmp-&gt;next = dummy-&gt;next;
        dummy-&gt;next = tmp;
    }
    head = dummy-&gt;next;
    delete(dummy);
    return head;
}

void mergeTwoList(ListNode *first, ListNode *second)
{
    ListNode *pFir = first;
    ListNode *pSec = second;

    while(pSec)
    {
        ListNode *tmp = pSec;
        pSec = pSec-&gt;next;
        tmp-&gt;next = pFir-&gt;next;
        pFir-&gt;next = tmp;
        pFir = tmp-&gt;next;
    }
}
void reorderList(ListNode *head) {
    if(!head || !head-&gt;next || !head-&gt;next-&gt;next) return;
    ListNode *sec, *fir;

    sec = findHalfNode(head);
    fir = sec;
    sec = sec-&gt;next;
    fir-&gt;next = NULL;
    fir = head;
    sec = reverseList(sec);
    mergeTwoList(fir,sec);

}
</code></pre>

<p>};</p>

<p>&#8220;`</p>
]]></content>
  </entry>
  
</feed>
