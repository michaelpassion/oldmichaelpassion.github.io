<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dp | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/dp/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-11-19T19:56:16+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Triangle]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/09/12/triangle/"/>
    <updated>2014-09-12T17:40:54+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/09/12/triangle</id>
    <content type="html"><![CDATA[<blockquote><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>

<p>For example, given the following triangle</p>

<pre><code>    [
         [2],       
        [3,4],  
       [6,5,7],  
      [4,1,8,3]  
    ]   
</code></pre>

<p>The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).</p>

<p>Note:<br/>
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.</p></blockquote>

<!--more-->


<pre><code class="c++ ">
class Solution {
public:
    int minimumTotal(vector&lt;vector&lt;int&gt; &gt; &amp;triangle) {
        int n = triangle.size();
        vector&lt;int&gt; minNums = triangle[n-1];

        for (int i = n - 2; i &gt;= 0; i--)
        {
            for(int j = 0; j &lt;= i; j++)
            {
                minNums[j] = min(minNums[j], minNums[j+1]) + triangle[i][j];
            }
        }

        return minNums[0];
    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
