<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dfs | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/dfs/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-08-24T20:03:25+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Minimum Depth of Binary Tree]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/13/minimum-depth-of-binary-tree/"/>
    <updated>2014-08-13T22:12:30+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/13/minimum-depth-of-binary-tree</id>
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, find its minimum depth.</p>

<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/minimum-depth-of-binary-tree/">leetcode 传送门</a></p>

<p><em>思路解析</em></p>

<p>深度优先遍历二叉树，每遍历一层就对depth+1，如果遇到结点是叶子结点就直接返回，如果先遍历到空结点，则这个空节点这一侧不存在子树，用<code>INT_MAX</code>标记其为不可能。递归地去左右子树中找最小值。</p>

<p>思路比较简单，但是做了挺长时间，dfs还得加强。</p>

<p><code>show your my code</code></p>

<pre><code class="c++">/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode *root) {
        if(!root) return 0;
        int depth = 1;
        return dfs(root); 
    }

    int dfs(TreeNode *root, int depth = 1)
    {
        if(!root) return INT_MAX;
        if(!root-&gt;left &amp;&amp; !root-&gt;right)
            return depth;
        depth++;
        return  min(dfs(root-&gt;left,depth),dfs(root-&gt;right,depth));

    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Path Sum]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/10/path-sum/"/>
    <updated>2014-08-10T16:40:49+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/10/path-sum</id>
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>

<p>For example:
Given the below binary tree and sum = 22,</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/path-sum/">leetcode path sum</a></p>

<pre><code class="c++">/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode *root, int sum) {
        vector&lt;int&gt; paths;
        tranverse(root,0,paths);

        for(int i=0; i&lt;paths.size(); ++i)
        {
            if(paths[i] == sum) 
                return true;
        }
        return false;
    }

    void tranverse(TreeNode *root, int sum, vector&lt;int&gt; &amp;paths)
    {
        if(!root) return;
        if(!root-&gt;left &amp;&amp; !root-&gt;right)
        {
            paths.push_back(sum+root-&gt;val);
            return;
        }
        tranverse(root-&gt;left, sum+root-&gt;val, paths);
        tranverse(root-&gt;right,sum+root-&gt;val, paths);
    }

};
</code></pre>
]]></content>
  </entry>
  
</feed>
