<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dfs | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/dfs/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-11-19T17:45:37+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Word Search]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/09/21/word-search/"/>
    <updated>2014-09-21T13:47:52+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/09/21/word-search</id>
    <content type="html"><![CDATA[<blockquote><p>Given a 2D board and a word, find if the word exists in the grid.</p>

<p>The word can be constructed from letters of sequentially adjacent cell, where &ldquo;adjacent&rdquo; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>

<p>For example,<br/>
Given board =</p>

<pre><code>[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]   
</code></pre>

<p>word = <code>"ABCCED"</code>, -> returns <code>true</code>,<br/>
word = <code>"SEE"</code>, -> returns <code>true</code>,<br/>
word = <code>"ABCB"</code>, -> returns <code>false</code>.</p></blockquote>

<!--more-->


<p><strong>思路</strong><br/>
先在board中寻找word的首字母，找到后在该位置的相邻位置（上下左右）查看是否能生成word，如果上下左右中有位置符合条件，则继续从该位置的临近位置搜索下一个字符。主要，不能board中的字符不能重复使用，故需要将访问过的字符做标记，下面代码中设置为<code>‘#’</code>,对该位置搜索完后要恢复原来的字母。</p>

<pre><code class="c++">class Solution {
public:

    bool dfs(vector&lt;vector&lt;char&gt;&gt; &amp;board,int row, int col, string word, int index)
    {
        if (index == word.size()-1) return true;
        char ctmp = board[row][col];
        board[row][col] = '#';

        //向上查询
        if (row-1&gt;=0 &amp;&amp; board[row-1][col] == word[index+1])
            if (dfs(board,row-1,col,word,index+1))
                return true;

         //向下
        if (row+1&lt;=board.size()-1 &amp;&amp; board[row+1][col] == word[index+1])
            if (dfs(board,row+1,col,word,index+1))
                return true;
        //向左
        if (col-1 &gt;= 0 &amp;&amp; board[row][col-1] == word[index+1])
             if (dfs(board,row,col-1,word,index+1))
                return true;
        向右
        if(col+1 &lt;= board[0].size()-1 &amp;&amp; board[row][col+1] == word[index+1])
            if (dfs(board,row,col+1,word,index+1))
                return true;

        //恢复原来的字母        
        board[row][col] = ctmp;
        return false;
    }
    bool exist(vector&lt;vector&lt;char&gt; &gt; &amp;board, string word) {
        const int rows = board.size();
        const int cols = board[0].size();

        for (int i=0; i&lt;rows; i++)
        {
            for (int j=0; j&lt;cols; j++)
            {
                if (board[i][j] == word[0] &amp;&amp; dfs(board,i,j,word,0))
                    return true;
            }
        }

        return false;
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimum Depth of Binary Tree]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/13/minimum-depth-of-binary-tree/"/>
    <updated>2014-08-13T22:12:30+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/13/minimum-depth-of-binary-tree</id>
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, find its minimum depth.</p>

<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/minimum-depth-of-binary-tree/">leetcode 传送门</a></p>

<p><em>思路解析</em></p>

<p>深度优先遍历二叉树，每遍历一层就对depth+1，如果遇到结点是叶子结点就直接返回，如果先遍历到空结点，则这个空节点这一侧不存在子树，用<code>INT_MAX</code>标记其为不可能。递归地去左右子树中找最小值。</p>

<p>思路比较简单，但是做了挺长时间，dfs还得加强。</p>

<p><code>show your my code</code></p>

<pre><code class="c++">/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode *root) {
        if(!root) return 0;
        int depth = 1;
        return dfs(root); 
    }

    int dfs(TreeNode *root, int depth = 1)
    {
        if(!root) return INT_MAX;
        if(!root-&gt;left &amp;&amp; !root-&gt;right)
            return depth;
        depth++;
        return  min(dfs(root-&gt;left,depth),dfs(root-&gt;right,depth));

    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Path Sum]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/10/path-sum/"/>
    <updated>2014-08-10T16:40:49+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/10/path-sum</id>
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>

<p>For example:
Given the below binary tree and sum = 22,</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/path-sum/">leetcode path sum</a></p>

<pre><code class="c++">/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode *root, int sum) {
        vector&lt;int&gt; paths;
        tranverse(root,0,paths);

        for(int i=0; i&lt;paths.size(); ++i)
        {
            if(paths[i] == sum) 
                return true;
        }
        return false;
    }

    void tranverse(TreeNode *root, int sum, vector&lt;int&gt; &amp;paths)
    {
        if(!root) return;
        if(!root-&gt;left &amp;&amp; !root-&gt;right)
        {
            paths.push_back(sum+root-&gt;val);
            return;
        }
        tranverse(root-&gt;left, sum+root-&gt;val, paths);
        tranverse(root-&gt;right,sum+root-&gt;val, paths);
    }

};
</code></pre>
]]></content>
  </entry>
  
</feed>
