<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: permutation | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/permutation/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-10-17T22:00:31+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Permutation Sequence]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/09/11/permutation-sequence/"/>
    <updated>2014-09-11T23:48:20+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/09/11/permutation-sequence</id>
    <content type="html"><![CDATA[<blockquote><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p>

<p>By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3):</p>

<ol>
<li>&ldquo;123&rdquo;</li>
<li>&ldquo;132&rdquo;</li>
<li>&ldquo;213&rdquo;</li>
<li>&ldquo;231&rdquo;</li>
<li>&ldquo;312&rdquo;</li>
<li>&ldquo;321&rdquo;</li>
</ol>


<p>Given n and k, return the k-th permutation sequence.</p>

<p>Note: Given n will be between 1 and 9 inclusive.</p></blockquote>

<!--more-->


<pre><code class="c++ 时间复杂度O(n),空间复杂度O(1)">class Solution {
public:
    int factorial(int n)
    {
        int res = 1;
        for(int i=2 ;i&lt;=n; i++)
            res *= i;
        return res;
    }
    string getPermutation(int n, int k) {
        int total = factorial(n);
          string candidate = string("123456789").substr(0, n);
          string res(n,' ');
          for(int i = 0; i &lt; n; i++)//依次计算排列的每个位
          {
              total /= (n-i);
             int index = (k-1) / total;
             res[i] = candidate[index];
             candidate.erase(index, 1);
             k -= index*total;
         }
         return res;
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[next_permutation]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/26/next-permutation/"/>
    <updated>2014-08-26T13:51:45+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/26/next-permutation</id>
    <content type="html"><![CDATA[<blockquote><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.<br/>
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br/>
The replacement must be in-place, do not allocate extra memory.<br/>
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p></blockquote>

<pre><code> 1,2,3 → 1,3,2 
 3,2,1 → 1,2,3 
 1,1,5 → 1,5,1
</code></pre>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/next-permutation/">leetcode express</a></p>

<p><em>思路</em></p>

<ol>
<li>从后向前扫描 <code>vector&lt;int&gt; num</code>，寻找后一个数大于前一个数的位置，标记前一个数的index 为 <code>i</code>。</li>
<li>再从后面开始扫描，寻找第一个大于下标为<code>num[i]</code>的数（必然存在，主意一定是大于没有等于符号），标记符合条件的下标为<code>j</code>,交换<code>num[i]</code> ,<code>num[j]</code>。</li>
<li>将<code>index[i]</code>后的全部数字逆置，得到结果。</li>
</ol>


<p><strong>exception</strong></p>

<ul>
<li>若当前数字排序已经是能表示的最大数字，所以符合条件的下一个字典序为所有排列中最小的数字</li>
</ul>


<pre><code class="c++">class Solution {
public:
    void nextPermutation(vector&lt;int&gt; &amp;num) {
        int n = num.size();
        if(n &lt; 2) return;

        for(int i = n-2, ii = n-1; i &gt;= 0; i--, ii--)
        {
            if(num[i] &lt; num[ii])
            {
                int j = n-1;
                while(num[j] &lt;= num[i]) 
                    j--;
                swap(num[i],num[j]);
                reverse(num.begin()+ii,num.end());
                return;
            }
        }

        reverse(num.begin(), num.end());
    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permutations II]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/16/permutations-ii/"/>
    <updated>2014-08-16T11:18:57+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/16/permutations-ii</id>
    <content type="html"><![CDATA[<blockquote><p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>

<p>For example,</p>

<p>[1,1,2] have the following unique permutations:</p>

<p>[1,1,2], [1,2,1], and [2,1,1].</p></blockquote>

<!--more-->


<p><a href="https://oj.leetcode.com/problems/permutations-ii/">leetcode传送门</a></p>

<p><em>思路</em></p>

<p>用回溯法，求全排列的顺序同permutation</p>

<p>permutation</p>

<ol>
<li>首先固定首位元素，从第二位开始依次与第一位交换</li>
<li>对去除首位的子序列，进行全排列。同样固定子序列的首位元素，从子序列的第二位起，依次与第一位交换。</li>
<li>交换到最后一位，将此时的序列打印，递归返回。</li>
</ol>


<p>permutation II 有重复数字，所以和相同的数字交换位置，就会得到重复的序列，通过一个无序集保存当前已经交换个位置的数，如果要交换位置的数已经在无序集中，就不交换进入下一个循环</p>

<pre><code class="c++ permutation II">class Solution {
public:
    vector&lt;vector&lt;int&gt; &gt; permuteUnique(vector&lt;int&gt; &amp;num) {
       vector&lt;vector&lt;int&gt; &gt; ret;
       if(num.size() &lt; 2)
       {
           ret.push_back(num);
           return ret;
       }

       perm(num,ret,0);
       return ret;
    }

    void perm(vector&lt;int&gt; &amp;num, vector&lt;vector&lt;int&gt; &gt; &amp;ret, int t)
    {
        if(t == num.size())
        {
            ret.push_back(num);
            return;
        }

        unordered_set&lt;int&gt; used;
        for(int i=t; i&lt; num.size(); ++i)
        {
            if(used.find(num[i]) == used.end())
            {
                swap(num[t],num[i]);
                perm(num,ret,t+1);
                swap(num[t],num[i]);
                used.insert(num[i]);
            }
        }
    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
