<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: leveltranverse | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/leveltranverse/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-11-04T18:41:08+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binary Tree Zigzag Level Order Traversal]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/14/binary-tree-zigzag-level-order-traversal/"/>
    <updated>2014-08-14T11:38:34+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/14/binary-tree-zigzag-level-order-traversal</id>
    <content type="html"><![CDATA[<blockquote><p>Given a binary tree, return the zigzag level order traversal of its nodes&#8217; values. (ie, from left to right, then right to left for the next level and alternate between).</p></blockquote>

<!--more-->


<blockquote><p>For example:</p>

<p>Given binary tree {3,9,20,#,#,15,7},</p></blockquote>

<pre><code>    3
   / \
  9  20
 /     \
15      7
</code></pre>

<p>return its zigzag level order traversal as:</p>

<pre><code>[
  [3],  
  [20,9],  
  [15,7]  
]
</code></pre>

<p><a href="https://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">leetcode 传送门</a></p>

<p><em>思路</em></p>

<p>层序遍历，奇数层将遍历本层结点得到的vector逆置以下再加入结果vector中</p>

<pre><code class="c++">/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    vector&lt;vector&lt;int&gt; &gt; zigzagLevelOrder(TreeNode *root) {
        vector&lt;vector&lt;int&gt; &gt; ret;
        if(!root) return ret;
        vector&lt;TreeNode *&gt; nodes;
        vector&lt;int&gt; nums;
        nodes.push_back(root);
        int cur = 0;
        int last = 1;
        bool oddlevel = true;
        while(cur &lt; nodes.size())
        {
            last = nodes.size();
            while(cur &lt; last)
            {
                nums.push_back(nodes[cur]-&gt;val);
                 if(nodes[cur]-&gt;right)
                    nodes.push_back(nodes[cur]-&gt;right);
                     if(nodes[cur]-&gt;left)
                    nodes.push_back(nodes[cur]-&gt;left);
                cur++;
            }
            if(oddlevel)
                reverse(nums.begin(),nums.end());
            oddlevel = !oddlevel;
            ret.push_back(nums);
            nums.clear();

        }
        return ret;
    }
};
</code></pre>
]]></content>
  </entry>
  
</feed>
