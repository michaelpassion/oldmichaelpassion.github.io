<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 面试 | My Progressing Blog]]></title>
  <link href="http://michaelpassion.github.io/blog/categories/mian-shi/atom.xml" rel="self"/>
  <link href="http://michaelpassion.github.io/"/>
  <updated>2014-11-19T17:45:37+08:00</updated>
  <id>http://michaelpassion.github.io/</id>
  <author>
    <name><![CDATA[Michael]]></name>
    <email><![CDATA[carter1373043@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iqiyi2014年校招笔试 客户端开发工程师]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/09/19/iqiyi2014nian-xiao-zhao-bi-shi-ke-hu-duan-kai-fa-gong-cheng-shi/"/>
    <updated>2014-09-19T20:38:30+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/09/19/iqiyi2014nian-xiao-zhao-bi-shi-ke-hu-duan-kai-fa-gong-cheng-shi</id>
    <content type="html"><![CDATA[<p><img src="http://campus.iqiyi.com/html/images/index/logo.png" alt="" /> <br/>
先总结一下：考的内容比较基础，概率题不难，排序题不难，语法细节的题目较少，后面大题没有算法题，都是概念性的问题，复习的好的话应该不是问题，问题是我没有复习好<del>(>_&lt;)</del>。</p>

<!--more-->


<ol>
<li><p>在C和C++中，申请和释放内存的基本操作是什么，它们之间区别是什么？</p>

<hr />

<p> C语言提供内存动态分配的函数有：malloc、calloc、realloc，在使用这些念书时必须包含其头文件，分别为：<code>&lt;malloc.h&gt;,&lt;stdlib.h&gt;,&lt;alloc.h&gt;</code></p>

<ul>
<li>malloc 函数： <code>void *malloc(unsigned int size)</code>
在内存的动态分配区域中分配一个长度为size的连续空间。如果分配成功，则返回所分配内存空间的首地址，否则返回NULL，申请的内存不会进行初始化。“类型说明符”表示把该区域用于任何数据类型。（类型说明符 *）表示吧返回值强制转换为该类型的指针。 “size”是一个无符号数。</li>
<li>calloc 函数：<code>void *calloc(unsigned int num, unsigned int size)</code><br/>
按照所给的数据古树和数据类型所占字节数，分配一个num * size连续的空间。函数返回该存储区的其实地址。calloc函数与malloc函数的区别仅在于一次可以分配n块区域。例如 <code>ps=(struct stu *) calloc(2,sizeof (struct stu))</code>; 其中的<code>sizeof(struct stu)</code>是求stu的结构长度。因此该语句的意思是：按stu的长度分配2块连续区域，强制转换为stu类型，并把其首地址赋予指针变量ps。</li>
<li>realloc 函数：<code>void *realloc(void *ptr, unsigned int size)</code> <br/>
重新定义所开辟内存的空间的大小。其中ptr所指的内存空间是签署函数已经开辟的，size为新的空间大小，其值可比原来大或小。函数返回新存储区的起始地址（该地址可能与以前的地址不同）。例如p1=(float *)realloc(p1,16);将原先开辟的8个字节调整为16个字节。<br/>
<strong>动态申请的内存空间要进行手动用free（）函数释放</strong></li>
<li>free 函数 <code>void free(void *ptr)</code><br/>
将以前开辟的某内存空间释放，其中<code>ptr</code>为存放待释放空间起始地址的指针变量，函数无返回值。应注意：<code>ptr</code>指向需要释放的内存空间的首地址<br/>
<strong>C++</strong><br/>
在C++中，内存分为5个区，分别是堆，栈，自由存储区，全局/静态存储区，和常量存储区。<br/>
申请和释放堆中分诶的存储空间，分别使用new 和 delete 两个运算符来完成。<br/>
对于非内部数据类型对象而言，光用malloc/free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于malloc/free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc/free.</li>
</ul>
</li>
<li><p>分析采用线性表，二叉平衡树和哈希表存储数据的优劣。</p></li>
</ol>


<hr />

<p>   线性表分为顺序存储结构和链式存储结构，顺序存储结构的有点事可以实现随机读取，时间复杂度O(1)，空间利用率高；缺点是进行插入杀出操作时需要移动大量数据，时间复杂度为O(n),同时容量受限制，需要事先去顶容量大小，容量大浪费空间资源，过小产生溢出。链式存储结构有点，插入和删除非常简单，前提条件是知道要插入的位置，时间复杂度为O(1),但如果如果不知道插入位置，定位需要遍历链表，时间复杂度为O(n),优点是没有容量限制，可以在使用过程中动态分配内存，缺点是不能实现随机读取，空间利用率低。<br/>
二叉平衡树 的查找效率为O(logn),插入删除也是O(logn)，缺点是需要额外的指针空间。<br/>
哈希表O(1)时间做查找，插入和删除，时间复杂度为O(n)。</p>

<ol>
<li>strcpy是字符串拷贝函数，原型是<code>char *strcpy(char *strDest, const char *strSrc);</code><br/>
1) 请实现函数strcpy<br/>
2）strcpy能把strSrc的内容复制到StrDest，为什么还要 <code>char*</code>类型的返回值</li>
</ol>


<hr />

<p>1） 代码如下：需要注意的点:
* 检查指针的有效性，古国检查指针的有效性使用<code>((!strDes）&amp;&amp; (!strSrc))</code>,说明对C语言中类型的隐式转换没有深刻认识<code>(!strDest)</code>是将<code>char*</code>转换成bool即是类型隐式转换
&#8220;`c++
    char <em>strcpy(char </em>strDest, const char <em>strSrc)
    {
        assert((strDest != NULL) &amp;&amp; (strSrc != NULL));
        char </em>address = strDest;
        while(<em>strSrc != &lsquo;/0&rsquo;)
            </em>strDest++ = <em>strSrc++;           <br/>
        </em>++strDest = &lsquo;/0&rsquo;;
        return address;
    }</p>

<pre><code>char *strcpy(char *strDest, const char *strSrc)
{
    assert((strDest != NULL) &amp;&amp; (strSrc != NULL));
    char *address = strDest;
    while(*strSrc != '/0')
        *strDest++ = *strSrc++;             
    *++strDest = '/0';
    return address;
}
</code></pre>

<p>&#8220;`</p>

<p>2) 返回 <code>char*</code>的指针是为了实现链式表达式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基础知识回顾]]></title>
    <link href="http://michaelpassion.github.io/blog/2014/08/27/ji-chu-zhi-shi-hui-gu/"/>
    <updated>2014-08-27T09:43:47+08:00</updated>
    <id>http://michaelpassion.github.io/blog/2014/08/27/ji-chu-zhi-shi-hui-gu</id>
    <content type="html"><![CDATA[<!--more-->


<ol>
<li>死锁<br/>
产生死锁的四个必要条件：</li>
<li>互斥条件：一个资源每次只能被一个进程（线程）使用。</li>
<li>请求与保持条件：一个进程（线程）因请求资源而阻塞时，对已获得的资源保持不放</li>
<li>不剥夺条件：进程（线程）已经获得的资源，在未使用完之前，不能强行剥夺</li>
<li>循环等待条件：多个进程（线程）之间形成一种头尾相接的循环等待资源关系。</li>
</ol>


<p>死锁的预防：<br/>
1. <strong>破坏请求保持</strong> 每个进程必须一次性请求它们所需的所有资源，若无法全部获取就等待，知道满足为止，也可以采用事务机制，确保可以回滚，既把获取、释放的资源做成原子性的。这样可以解决某些某些进程无法事先预估自己需要哪些资源<br/>
2. <strong>破坏不可剥夺条件</strong> 一个已占有资源的进程若要再申请新的资源，它必须先释放已占有的资源。若随后再需要这些资源，需要重新申请。<br/>
3. <strong>破坏循环等待条件</strong> 将系统中所有的资源设置标志位、排序，规定所有的进程申请资源必须以一定的顺序（升序或降序）做操作。</p>

<hr />

<p><strong>fork</strong><br/>
在UNIX中，除了PID=0 的交换进程，所有进程都是其他进程使用系统调用fork创建的，这里调用fork创建新进程的进程即为父进程，而穿件的进程为子进程，因而除了进程0以为爱的进程都只有一个父进程，但一个进程可以有多个子进程。如果用户fork一个子进程后exit，子进程的父进程将为init。<br/>
进程在linux中呈树桩结构，init为根节点，其它进程均有父进程。<br/>
fork的作用是复制一个与当前一样的进程。新进程的所有数据（变量，环境变量，程序计数器等）数值都与袁金成一致，但是是一个全新的进程，并作为原进程的子进程。<code>fork函数被调用一次但返回两次</code>。两次返回的唯一区别是<code>子进程中返回0值</code>而<code>父进程中返回子进程的ID</code>。</p>

<blockquote><p><a href="http://music.douban.com/subject/1460454/">转  Linux fork 运行机制  </a></p></blockquote>

<p> 给出如下C程序，在linux下使用gcc编译：
&#8220;`c++</p>

<h1>include &ldquo;stdio.h&rdquo;</h1>

<h1>include &ldquo;sys/types.h&rdquo;</h1>

<h1>include &ldquo;unistd.h&rdquo;</h1>

<p> int main()
{
    pid_t pid1;
    pid_t pid2;
    pid1 = fork();
    pid2 = fork();
    printf(&ldquo;pid1:%d, pid2:%d\n&rdquo;, pid1, pid2);
}
&#8220;`<br/>
要求如下：</p>

<p>已知从这个程序执行到这个程序的所有进程结束这个时间段内，没有其它新进程执行。<br/>
1、请说出执行这个程序后，将一共运行几个进程。<br/>
2、如果其中一个进程的输出结果是“pid1:1001, pid2:1002”，写出其他进程的输出结果（不考虑进程执行顺序）。</p>

<p><strong>预备知识</strong><br/>
1. 进程可以看做程序的一次执行过程。在Linux下，每个进程有唯一的PID标志进程，PID是一个从1到32768得正整数，其中1一般是特殊进程，其它进程从2开始依次编号。当用完32768后，从2重新开始。<br/>
2. linux中有一个叫进程表的结构用来存储当前正在运行的进程。可以使用“ps aux”命令查看所有正在运行的进程。<br/>
3. 进程在linux中呈树状结构，init为根节点，其它进程均有父进程，某进程的父进程就是启动这个进程的进程，这个进程叫做父进程的子进程。<br/>
4. fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程。</p>

<p><strong>解题关键</strong></p>

<p><img src="http://pic001.cnblogs.com/images/2010/155795/2010100817495697.gif" alt="" /></p>

<p>上图表示一个含有fork的程序，而fork语句可以看成将程序切为A、B两个部分。然后整个程序会如下运行：</p>

<p>step1、设由shell直接执行程序，生成了进程P。P执行完Part. A的所有代码。</p>

<p>step2、当执行到pid = fork();时，P启动一个进程Q，Q是P的子进程，和P是同一个程序的进程。Q继承P的所有变量、环境变量、程序计数器的当前值。</p>

<p>step3、在P进程中，fork()将Q的PID返回给变量pid，并继续执行Part. B的代码。</p>

<p>step4、在进程Q中，将0赋给pid，并继续执行Part. B的代码。</p>

<p><strong>1、P执行了所有程序，而Q只执行了Part. B，即fork()后面的程序。这是因为Q继承了P的PC-程序计数器
</strong> <br/>
<strong>2、Q继承了fork( )语句执行时当前的环境，而不是程序的初始环境。
</strong><br/>
<strong>3、P中fork( )语句启动子进程Q，并将Q的PID返回，而Q中的fork( )语句不启动新进程，仅将0返回。</strong></p>

<p><strong>解题</strong>
1. 从shell中执行此程序，启动了一个进程，假设这个进程为P0,设其PID为xxx；
2. 当执行到<code>pid1 = fork();</code>时，Po启动的一个子进程P1，由题目知P1的PID为1001，暂且不管P1。
3. Po中得fork返回1001给<code>pid1</code>，继续执行到<code>pid2 = fork();</code>，此时启动另一个新进程，设为P2,由题目知pid2为1002。同样暂且不管P2。
4. P0中的第二个fork返回1002给pid2，继续执行完后续程序，结束。所以，P0的结果为“pid1:1001, pid2:1002”。
5. 再看P2，P2生成时，P0中pid1=1001，所以P2中pid1继承P0的1001，而作为子进程pid2=0。P2从第二个fork后开始执行，结束后输出“pid1:1001, pid2:0”。
6. 接着看P1，P1中第一条fork返回0给pid1，然后接着执行后面的语句。而后面接着的语句是pid2 = fork();执行到这里，P1又产生了一个新进程，设为P3。先不管P3。
7. P1中第二条fork将P3的PID返回给pid2，由预备知识知P3的PID为1003，所以P1的pid2=1003。P1继续执行后续程序，结束，输出“pid1:0, pid2:1003”。
8. P3作为P1的子进程，继承P1中pid1=0，并且第二条fork将0返回给pid2，所以P3最后输出“pid1:0, pid2:0”。
9. 至此，整个执行过程完毕。</p>

<p><strong>所得答案：</strong></p>

<pre><code>  1、一共执行了四个进程。（P0, P1, P2, P3）

  2、另外几个进程的输出分别为：

  pid1:1001, pid2:0

  pid1:0, pid2:1003

  pid1:0, pid2:0  
</code></pre>

<p><img src="http://pic001.cnblogs.com/images/2010/155795/2010100817501849.gif" alt="" /></p>

<h2><strong>raid</strong></h2>

<hr />

<p>其基本思想就是把多个相对便宜的硬盘组合起来,成为一个硬盘阵列组,使性能达到甚 至超过一个价格昂贵、容量巨大的硬盘。根据选择的版本不同,RAID 比单颗硬盘有以下一 个或多个方面的好处:增强资料整合度,增强容错功能,增加处理量或容量。另外,磁碟阵 列对于电脑来说, 看起来就像一个单独的硬盘或逻辑存储单元。  RAID 把多个硬盘组合成为一个逻辑磁区,因此,作业系统只会把它当作一个硬盘。RAID 目前有 0~7 及其中的若干两种组合等十余种不同的等级,不同的 RAID 方法各有其优缺点,<br/>
 RAID 0: 将多个硬盘合为一个,一个损坏,即不可用,<br/>
 RAID 1: 镜像方式存储,利用率仅 &frac12;,但可靠性高</p>

<p> ##堆栈数据代码区 ___
 在UNIX中，从高地址到低地址一次为 stack heap data text</p>

<ul>
<li>栈区(stack) 由编译器自动分配释放，存放函数的参数值，局部变量值等。</li>
<li>堆区 （heap）一般由程序员分配释放，如程序员不释放，程序结束时可能由OS回收。</li>
<li>全局区（静态区 static）全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域data段，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域bss段。程序结束后由系统释放</li>
<li>文字常量区 常量字符串就是放在这里。常量字符串不恩能够修改，否则程序会在运行期崩溃。程序结束后由系统释放。</li>
<li>程序代码区 存放函数体的二进制代码。</li>
</ul>


<h2>c++面向对象语言 </h2>

<hr />

<p><strong>const</strong></p>

<pre><code>int b = 500;const int* a = &amp;b; [1]int const *a = &amp;b; [2]  ￼int* const a = &amp;b; [3]const int* const a = &amp;b; [4]
</code></pre>

<p>如果const位于<code>*</code>左侧，则const就是用来修饰指针所指向的变量，既指针指向为常量；<br/>
如果const位于<code>*</code>右侧，则const就是修饰指针本身，既指针本身是常量。<br/>
还有一个有效的办法是反着读： 如[1] a指向（<code>*</code>）int型常量；[2]a指向(<code>*</code>)常量是int型；[3]a是常量指针指向(<code>*</code>)int型变量; [4]a是常量指针指向(<code>*</code>)int型常量</p>

<h2>深拷贝 和 浅拷贝</h2>

<hr />

<p>浅拷贝：被复制的对象的所有变量都含有原来对象相同的值，而其所有的对其他对象的引用都仍然指向原来的对象。浅拷贝复制时，将这个对象的值字段和引用字段（均为非晶态字段）全部复制过去，获得了这个对象的值和地址。即：当其中一个对象的引用字段所指向的地址中的变量变化时，所有浅拷贝对象中的该引用字段都会发生变化。<br/>
深拷贝：被复制对象会讲所有非引用类型的字段复制给新对象，同事将引用类型所指向地址中存储的对象复制给新的对象。深拷贝与浅拷贝的具备在于对引用类型的对待上，一个是复制地址（浅拷贝）。另一个是复制地址指向位置的数据(深拷贝)。</p>

<h2>c/c++可变参数的实现</h2>

<hr />

<ol>
<li>可变参数的原理</li>
<li>可变长书的设计</li>
<li>可变参数的实现</li>
</ol>

]]></content>
  </entry>
  
</feed>
