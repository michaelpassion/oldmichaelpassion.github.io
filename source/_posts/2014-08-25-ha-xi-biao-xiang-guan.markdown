---
layout: post
title: "哈希表相关"
date: 2014-08-25 16:04:35 +0800
comments: true
categories: 哈希表 hash
---
> 先从面试题说起：搜索引擎会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。

> 假设目前有一千万个记录（这些查询串的重复度比较高，虽然总数是1千万，但如果除去重复后，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就是越热门。），请你统计最热门的10个查询串，要求使用的内存不能超过1G。

#哈希表 （Hash table）

hash table 是根据关键码值直接访问的数据结构（key value）。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。

hashtable的做法就是把key通过固定的哈希函数转换成一个整型数字，然后将该数字对数组长度取余，取余结果当做key的数组下表，将value存储在下标对应的数组空间里。 使用哈希表进行查询的时候，再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，利用数组的快速定位的性能来进行数据定位。

问题解析：

要统计最热门查询，首先就是要统计每个Query出现的次数，然后根据统计结果，找出Top 10.

###1. Query统计  
Query统计有两种方法：
 
* 直接排序  
  1. 首先对日志中所有的Query排序，再遍历排序后的Query，统计每个Query出现的次数。题目中要求内存不超过1G，一千万条记录每条记录255Byte，大概需要2G多内存。不满足要求。当数据量较大内存无法装下时，可以采用外排序的方法，这里了采用归并排序。时间复杂度为O（NlgN）。
   2. 排序后再对已经有序的Query文件进行表里，统计每个Query出现的次数，写入文件中，时间复杂度O（n）。
   3. 综合分析一下，排序的时间复杂度是O(NlgN)，而遍历的时间复杂度是O(N)，因此该算法的总体时间复杂度就是O(N+NlgN)=O（NlgN）。
   
* Hash Table法  
   1. 题目中说明如遇Query重复读较高，实际只有300万的Query，每个Query255Byte，实际占用内存不超过`255*3M`，1G内存完全够用，因此可以把他们都放在内存中，现在只需要一个合适的数据结构，来降低查询所用的时间，Hash Table是首选，因为Hash Table的时间复杂度几乎为 `O(1)`。
   2. 维护一个Key为uQuery字串，Value为该Query出现的次数的Hash Table，每次读取一个Query，如果该字串不在Table中，就加入该字串，并将Value付志伟1；如果该字串在Table中，那么该字串的统计次数加一。最终在`O(n)`的时间复杂度完成了该海量数据的处理。
   3. 与算法1比时间复杂度提高了一个数量级，而且该算法复杂度只需要对数据文件进行一次IO操作，而算法1的IO操作较多，因此算法2更佳。

###2. 找出Top 10  
* 算法一 普通排序   
我想对于排序算法大家都已经不陌生了，这里不在赘述，我们要注意的是排序算法的时间复杂度是NlgN，在本题目中，三百万条记录，用1G内存是可以存下的。
* 算法二 部分排序  
题目要求是求出Top 10，因此我们没有必要对所有的Query都进行排序，我们只需要维护一个10个大小的数组，初始化放入10个Query，按照每个Query的统计次数由大到小排序，然后遍历这300万条记录，每读一条记录就和数组最后一个Query对比，如果小于这个Query，那么继续遍历，否则，将数组中最后一条数据淘汰，加入当前的Query。最后当所有的数据都遍历完毕之后，那么这个数组中的10个Query便是我们要找的Top10了。这样，算法的最坏时间复杂度是 `O(N*K)`， 其中K是指top多少。
* 算法三 堆    
在算法二中，我们已经将时间复杂度由NlogN优化到NK。每次比较完成之后，需要把元素插入到线性表中，而且采用的时顺序比较，如果采用二分查找的话，操作的复杂度就降低到logK，不过数据移动次数没有什么变化。
   
		