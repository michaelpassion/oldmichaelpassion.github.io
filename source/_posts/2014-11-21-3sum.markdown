---
layout: post
title: "3Sum"
date: 2014-11-21 21:05:30 +0800
comments: true
categories: leetcode 
---
>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

>Note:  
* Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)  
* The solution set must not contain duplicate triplets.  

    For example, given array S = {-1 0 1 2 -1 -4}, A solution set is:  
    (-1, 0, 1)  
    (-1, -1, 2) 
    
    
<!--more-->   
**解题思路**  
1. 首先想到和2sum类似，可以将3sum转换为2sum, 遍历数组，用0减去当前数字，将3sum转换为2sum。  
2. leetcode  [Two Sum](https://oj.leetcode.com/problems/two-sum/) 只有一组解，而3sum有多组解，且要考虑有重复解。  
3. 去除重复解，先对数组排序，在遍历数组时跳过重复的数字，在for循环里找`2Sum`时，要找到相同数字的最后（或最前）一个，记得始终要`l < r`, 见代码;  
4. 找到符合条件的一组加入结果中即可。  

```
vector<vector<int> > threeSum(vector<int> &num) {
    vector<vector<int> > res;
    if (num.size() <= 2) return res;
    sort(num.begin(),num.end());
    
    int twoSum = 0;

    for (int i=0; i< num.size()-2; i++)
    {
        int l = i+1, r = num.size()-1;
        twoSum = 0 - num[i];
        while(l < r)
        {
            if (num[l] + num[r] == twoSum)
            {
                vector<int> three(3);
                three[0] = num[i];
                three[1] = num[l];
                three[2] = num[r];
                res.push_back(three);
                
                //一直找到与num[l]相同的最后一个数
                while (l < r && num[l] == num[l+1])
                    l++;
                //一直找到与num[l]相同的最前一个数
                while (num[r-1] == num[r] && l < r)
                    r--;
                l++; r--;
                
            } else if ( num[l]+num[r] < twoSum )
            {
                //一直找到与num[l]相同的最后一个数
                while (l < r && num[l] == num[l+1])
                    l++;
                l++;

            }
            else if ( num[r]+num[r] > twoSum )
            {
                //一直找到与num[l]相同的最前一个数
                while (num[r-1] == num[r] && l < r)
                    r--;
                r--;
            }
        }
        
        while(num[i+1] == num[i] && i <num.size() - 1)
            i++;
    }
    return res;
    
}

```