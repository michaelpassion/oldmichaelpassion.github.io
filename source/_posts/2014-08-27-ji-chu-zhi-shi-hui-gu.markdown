---
layout: post
title: "基础知识回顾"
date: 2014-08-27 09:43:47 +0800
comments: true
categories: 笔试 面试
---

<!--more-->
1. 死锁  
产生死锁的四个必要条件：
1. 互斥条件：一个资源每次只能被一个进程（线程）使用。
2. 请求与保持条件：一个进程（线程）因请求资源而阻塞时，对已获得的资源保持不放
3. 不剥夺条件：进程（线程）已经获得的资源，在未使用完之前，不能强行剥夺
4. 循环等待条件：多个进程（线程）之间形成一种头尾相接的循环等待资源关系。  

死锁的预防：  
1. **破坏请求保持** 每个进程必须一次性请求它们所需的所有资源，若无法全部获取就等待，知道满足为止，也可以采用事务机制，确保可以回滚，既把获取、释放的资源做成原子性的。这样可以解决某些某些进程无法事先预估自己需要哪些资源  
2. **破坏不可剥夺条件** 一个已占有资源的进程若要再申请新的资源，它必须先释放已占有的资源。若随后再需要这些资源，需要重新申请。  
3. **破坏循环等待条件** 将系统中所有的资源设置标志位、排序，规定所有的进程申请资源必须以一定的顺序（升序或降序）做操作。

* * *
**fork**  
在UNIX中，除了PID=0 的交换进程，所有进程都是其他进程使用系统调用fork创建的，这里调用fork创建新进程的进程即为父进程，而穿件的进程为子进程，因而除了进程0以为爱的进程都只有一个父进程，但一个进程可以有多个子进程。如果用户fork一个子进程后exit，子进程的父进程将为init。  
进程在linux中呈树桩结构，init为根节点，其它进程均有父进程。  
fork的作用是复制一个与当前一样的进程。新进程的所有数据（变量，环境变量，程序计数器等）数值都与袁金成一致，但是是一个全新的进程，并作为原进程的子进程。`fork函数被调用一次但返回两次`。两次返回的唯一区别是`子进程中返回0值`而`父进程中返回子进程的ID`。  
>[转  Linux fork 运行机制  ](http://music.douban.com/subject/1460454/)  

 给出如下C程序，在linux下使用gcc编译：
```c++
#include "stdio.h"
#include "sys/types.h"
#include "unistd.h"
 int main()
{
    pid_t pid1;
    pid_t pid2;
    pid1 = fork();
    pid2 = fork();
    printf("pid1:%d, pid2:%d\n", pid1, pid2);
}
```  
要求如下： 

已知从这个程序执行到这个程序的所有进程结束这个时间段内，没有其它新进程执行。  
1、请说出执行这个程序后，将一共运行几个进程。  
2、如果其中一个进程的输出结果是“pid1:1001, pid2:1002”，写出其他进程的输出结果（不考虑进程执行顺序）。   

**预备知识**  
1. 进程可以看做程序的一次执行过程。在Linux下，每个进程有唯一的PID标志进程，PID是一个从1到32768得正整数，其中1一般是特殊进程，其它进程从2开始依次编号。当用完32768后，从2重新开始。  
2. linux中有一个叫进程表的结构用来存储当前正在运行的进程。可以使用“ps aux”命令查看所有正在运行的进程。  
3. 进程在linux中呈树状结构，init为根节点，其它进程均有父进程，某进程的父进程就是启动这个进程的进程，这个进程叫做父进程的子进程。  
4. fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程。

**解题关键**  

![](http://pic001.cnblogs.com/images/2010/155795/2010100817495697.gif)  

上图表示一个含有fork的程序，而fork语句可以看成将程序切为A、B两个部分。然后整个程序会如下运行：

step1、设由shell直接执行程序，生成了进程P。P执行完Part. A的所有代码。 

step2、当执行到pid = fork();时，P启动一个进程Q，Q是P的子进程，和P是同一个程序的进程。Q继承P的所有变量、环境变量、程序计数器的当前值。

step3、在P进程中，fork()将Q的PID返回给变量pid，并继续执行Part. B的代码。

step4、在进程Q中，将0赋给pid，并继续执行Part. B的代码。

**1、P执行了所有程序，而Q只执行了Part. B，即fork()后面的程序。这是因为Q继承了P的PC-程序计数器
**   
**2、Q继承了fork( )语句执行时当前的环境，而不是程序的初始环境。
**  
**3、P中fork( )语句启动子进程Q，并将Q的PID返回，而Q中的fork( )语句不启动新进程，仅将0返回。** 

**解题**
1. 从shell中执行此程序，启动了一个进程，假设这个进程为P0,设其PID为xxx；
2. 当执行到`pid1 = fork(); `时，Po启动的一个子进程P1，由题目知P1的PID为1001，暂且不管P1。
3. Po中得fork返回1001给`pid1`，继续执行到`pid2 = fork();`，此时启动另一个新进程，设为P2,由题目知pid2为1002。同样暂且不管P2。
4. P0中的第二个fork返回1002给pid2，继续执行完后续程序，结束。所以，P0的结果为“pid1:1001, pid2:1002”。
5. 再看P2，P2生成时，P0中pid1=1001，所以P2中pid1继承P0的1001，而作为子进程pid2=0。P2从第二个fork后开始执行，结束后输出“pid1:1001, pid2:0”。
6. 接着看P1，P1中第一条fork返回0给pid1，然后接着执行后面的语句。而后面接着的语句是pid2 = fork();执行到这里，P1又产生了一个新进程，设为P3。先不管P3。
7. P1中第二条fork将P3的PID返回给pid2，由预备知识知P3的PID为1003，所以P1的pid2=1003。P1继续执行后续程序，结束，输出“pid1:0, pid2:1003”。
8. P3作为P1的子进程，继承P1中pid1=0，并且第二条fork将0返回给pid2，所以P3最后输出“pid1:0, pid2:0”。
9. 至此，整个执行过程完毕。

**所得答案：**  

      1、一共执行了四个进程。（P0, P1, P2, P3）

      2、另外几个进程的输出分别为：

      pid1:1001, pid2:0

      pid1:0, pid2:1003

      pid1:0, pid2:0  
      
![](http://pic001.cnblogs.com/images/2010/155795/2010100817501849.gif)


##**raid**
___
其基本思想就是把多个相对便宜的硬盘组合起来,成为一个硬盘阵列组,使性能达到甚 至超过一个价格昂贵、容量巨大的硬盘。根据选择的版本不同,RAID 比单颗硬盘有以下一 个或多个方面的好处:增强资料整合度,增强容错功能,增加处理量或容量。另外,磁碟阵 列对于电脑来说, 看起来就像一个单独的硬盘或逻辑存储单元。  RAID 把多个硬盘组合成为一个逻辑磁区,因此,作业系统只会把它当作一个硬盘。RAID 目前有 0~7 及其中的若干两种组合等十余种不同的等级,不同的 RAID 方法各有其优缺点,  
 RAID 0: 将多个硬盘合为一个,一个损坏,即不可用,  
 RAID 1: 镜像方式存储,利用率仅 1/2,但可靠性高
 
 ##堆栈数据代码区 ___
 在UNIX中，从高地址到低地址一次为 stack heap data text  
 
* 栈区(stack) 由编译器自动分配释放，存放函数的参数值，局部变量值等。
* 堆区 （heap）一般由程序员分配释放，如程序员不释放，程序结束时可能由OS回收。
* 全局区（静态区 static）全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量在一块区域data段，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域bss段。程序结束后由系统释放
* 文字常量区 常量字符串就是放在这里。常量字符串不恩能够修改，否则程序会在运行期崩溃。程序结束后由系统释放。
* 程序代码区 存放函数体的二进制代码。

c++面向对象语言 
---
---
**const**  

```
int b = 500;const int* a = &b; [1]int const *a = &b; [2]  ￼int* const a = &b; [3]const int* const a = &b; [4]
```
如果const位于`*`左侧，则const就是用来修饰指针所指向的变量，既指针指向为常量；  
如果const位于`*`右侧，则const就是修饰指针本身，既指针本身是常量。  
还有一个有效的办法是反着读： 如[1] a指向（`*`）int型常量；[2]a指向(`*`)常量是int型；[3]a是常量指针指向(`*`)int型变量; [4]a是常量指针指向(`*`)int型常量   
深拷贝 和 浅拷贝
---
---
浅拷贝：被复制的对象的所有变量都含有原来对象相同的值，而其所有的对其他对象的引用都仍然指向原来的对象。浅拷贝复制时，将这个对象的值字段和引用字段（均为非晶态字段）全部复制过去，获得了这个对象的值和地址。即：当其中一个对象的引用字段所指向的地址中的变量变化时，所有浅拷贝对象中的该引用字段都会发生变化。  
深拷贝：被复制对象会讲所有非引用类型的字段复制给新对象，同事将引用类型所指向地址中存储的对象复制给新的对象。深拷贝与浅拷贝的具备在于对引用类型的对待上，一个是复制地址（浅拷贝）。另一个是复制地址指向位置的数据(深拷贝)。


c/c++可变参数的实现
---
---
1. 可变参数的原理
2. 可变长书的设计
3. 可变参数的实现